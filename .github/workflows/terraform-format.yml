name: 'Terraform GitHub Actions'
on:
  - pull_request
jobs:
  terraform:
    name: 'Terraform fmt'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@master
      - name: 'Terraform Format'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 0.12.19
          tf_actions_subcommand: 'fmt'
          tf_actions_working_dir: './terraform'
          tf_actions_comment: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: tflint
        run: |
          pwd
          ls
          curl https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
          output=""
          for d in $(find ./terraform/deploy -type d) ;do
            section=$(tflint -f json --force --disable-rule=aws_cloudwatch_log_group_invalid_name --config=./terraform/.tflint.hcl $d |jq -c '.issues[] | "_ISSUE FOUND:_ (\(.rule.name)) in \(.range.filename) line \(.range.start.line) - \(.range.end.line)"')
            output+=$(if [ ${#section} -gt 1 ] ; then echo "***ISSUE(S) FOUND IN ${d}***: ${section}|"; fi);
          done
          for d in $(find ./terraform/modules -type d) ;do
            section=$(tflint -f json --force --disable-rule=aws_cloudwatch_log_group_invalid_name --config=./terraform/.tflint.hcl $d |jq -c '.issues[] | "_ISSUE FOUND:_ (\(.rule.name)) in \(.range.filename) line \(.range.start.line) - \(.range.end.line)"')
            output+=$(if [ ${#section} -gt 1 ] ; then echo "***ISSUE(S) FOUND IN ${d}***: ${section}¢"; fi);
          done
          echo "::set-env name=TFLINT::$(echo ${output} | tr ':' '~' )"

      - name: comment-to-pr
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            if (process.env.TFLINT.length > 5){
              var str = process.env.TFLINT.replace(/\"/g,"").replace(/~/g, ":");
              var list = str.split("¢");
              list.pop()
              for (i = 0; i < list.length; i++) {
                await github.issues.createComment({
                              issue_number: context.issue.number,
                              owner: context.repo.owner,
                              repo: context.repo.repo,
                              body: list[i]
                })
              }
            }
