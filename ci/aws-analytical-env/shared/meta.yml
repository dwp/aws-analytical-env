meta:
  plan:
    terraform-common-config:
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            tag: ((dataworks.terraform_version))
        params:
          TF_INPUT: false
          TF_CLI_ARGS_apply: -lock-timeout=300s
          TF_CLI_ARGS_plan: -lock-timeout=300s
          TF_VAR_costcode: ((dataworks.costcode))

    terraform-bootstrap:
      task: terraform-bootstrap
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: dwpdigital/jinja-yaml-aws
            tag: 0.0.19
        run:
          path: sh
          args:
            - -exc
            - |
              python bootstrap_terraform.py
              sed -i '/^assume_role/ d' terraform/deploy/$DEPLOY_PATH/terraform.tfvars
              cp terraform/deploy/$DEPLOY_PATH/terraform.tf ../terraform-config
              cp terraform/deploy/$DEPLOY_PATH/terraform.tfvars ../terraform-config
          dir: aws-analytical-env
        inputs:
          - name: aws-analytical-env
        outputs:
          - name: terraform-config
      params:
        AWS_REGION: eu-west-2

    terraform-apply:
      task: terraform-apply
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
            - -exc
            - |
              cp ../../../../terraform-config/terraform.tf .
              cp ../../../../terraform-config/terraform.tfvars .
              terraform workspace show
              terraform init
              export TF_VAR_aws_analytical_env_emr_launcher_zip="{base_path = \"../../../../emr-launcher-release\", version = \"$(cat ../../../../emr-launcher-release/version)\"}"
              terraform plan -out terraform.plan
              terraform apply -auto-approve terraform.plan
        inputs:
          - name: aws-analytical-env
          - name: terraform-config

    terraform-plan:
      task: terraform-plan
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
            - -exc
            - |
              cp ../../../../terraform-config/terraform.tf .
              cp ../../../../terraform-config/terraform.tfvars .
              terraform workspace show
              terraform init
              export TF_VAR_aws_analytical_env_emr_launcher_zip="{base_path = \"../../../../emr-launcher-release\", version = \"$(cat ../../../../emr-launcher-release/version)\"}"
              terraform plan
        inputs:
          - name: aws-analytical-env
          - name: terraform-config

    terraform-output-app:
      task: terraform-output-app
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
            - -exc
            - |
              cp ../../../../terraform-config/terraform.tf .
              cp ../../../../terraform-config/terraform.tfvars .
              terraform workspace show
              terraform init
              export TF_VAR_aws_analytical_env_emr_launcher_zip="{base_path = \"../../../../emr-launcher-release\", version = \"$(cat ../../../../emr-launcher-release/version)\"}"
              terraform output --json > ../../../../terraform-output-app/outputs.json
          dir: aws-analytical-env/terraform/deploy/app
        inputs:
          - name: aws-analytical-env
          - name: terraform-config
        outputs:
          - name: terraform-output-app

    analytical-env-e2e-tests:
      task: analytical-env-e2e-tests
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_python_boto_behave_repository))
            version: ((dataworks.docker_python_boto_behave_version))
            tag: ((dataworks.docker_python_boto_behave_version))
        params:
          E2E_TEST_TIMEOUT: 300
          E2E_FEATURE_TAG_FILTER: '@analytical'
          AWS_S3_INPUT_BUCKET: 'na'
          AWS_ACC: ((dataworks.aws_dev_acc))
          AWS_DEFAULT_PROFILE: 'default'
          AWS_SNS_TOPIC_NAME: 'na'
          DYNAMODB_TABLE_NAME: 'na'
          MONGO_SNAPSHOT_BUCKET: 'na'
          MONGO_SNAPSHOT_PATH: 'na'
          DLQ_S3_PATH_PREFIX: 'na'
        run:
          dir: aws-dataworks-e2e-framework
          path: sh
          args:
            - -exc
            - |
              mkdir ~/.aws
              cat << EOF > ~/.aws/config
              [profile default]
              role_arn = arn:aws:iam::((dataworks.aws_dev_acc)):role/ci
              credential_source = Ec2InstanceMetadata
              region = ((dataworks.aws_region))
              EOF
              cd src/runners
              export no_proxy="$no_proxy,s3.*.amazonaws.com,s3.amazonaws.com"
              ./run-ci.sh "../../../meta" "" "" "" "" "../../../terraform-output-analytical-dataset-generation/outputs.json"
        inputs:
          - name: aws-dataworks-e2e-framework
          - name: meta
          - name: terraform-output-analytical-dataset-generation

    terraform-taint:
      task: terraform-taint
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
            - -exc
            - |
              cp terraform-config/terraform.tf .
              cp terraform-config/terraform.tfvars .
              terraform workspace show
              terraform init
              terraform taint "module.emr.aws_emr_cluster.cluster"
        inputs:
          - name: aws-analytical-env
          - name: terraform-config

    terraform-analytical-dataset-generation-bootstrap:
      task: terraform-analytical-dataset-generation-bootstrap
      .: (( inject meta.plan.terraform-common-config ))
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: dwpdigital/jinja-yaml-aws
            tag: 0.0.19
        run:
          path: sh
          args:
            - -exc
            - |
              export AWS_REGION=((dataworks.aws_region))
              python bootstrap_terraform.py
              cp terraform.tf ../terraform-config
              cp terraform.tfvars ../terraform-config
          dir: aws-analytical-dataset-generation
        inputs:
          - name: aws-analytical-dataset-generation
        outputs:
          - name: terraform-config


    terraform-output-analytical-dataset-generation:
      task: terraform-output-analytical-dataset-generation
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            tag: ((dataworks.terraform_version))
        run:
          path: sh
          args:
            - -exc
            - |
              cp ../terraform-config/terraform.tf .
              cp ../terraform-config/terraform.tfvars .
              terraform workspace show
              terraform init
              terraform output --json > ../terraform-output-analytical-dataset-generation/outputs.json
          dir: aws-analytical-dataset-generation
        inputs:
          - name: terraform-config
        outputs:
          - name: terraform-output-analytical-dataset-generation
      params:
        TF_CLI_ARGS_plan: -lock-timeout=300s
        TF_INPUT: "false"

    vcs-to-s3:
      task: vcs-to-s3
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_ROLE_ARN: arn:aws:iam::((aws_account.development)):role/ci
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
        run:
          path: sh
          args:
            - -exc
            - |
              export AWS_DEFAULT_REGION
              source /assume-role
              set -x
              AWS_COMMOM_BUCKET="$(cat terraform-output-common/outputs.json |  jq -r '.config_bucket.value.id')"
              cd chs-uc-lab-repo
              aws s3 sync . s3://$AWS_COMMOM_BUCKET/$S3_ROOT --include "*"

    terraform-output-common:
      task: terraform-output-common
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
            - -exc
            - |
              terraform workspace show
              terraform init
              terraform output --json > ../terraform-output-common/outputs.json
          dir: aws-common-infrastructure
        inputs:
          - name: aws-common-infrastructure
        outputs:
          - name: terraform-output-common
