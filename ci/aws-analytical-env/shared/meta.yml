meta:
  plan:
    terraform-common-config:
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            tag: ((dataworks.terraform_version))
        params:
          TF_INPUT: false
          TF_CLI_ARGS_apply: -lock-timeout=300s
          TF_CLI_ARGS_plan: -lock-timeout=300s
          TF_VAR_costcode: ((dataworks.costcode))

    terraform-bootstrap:
      task: terraform-bootstrap
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        run:
          path: sh
          args:
            - -exc
            - |
              python bootstrap_terraform.py
              sed -i '/^assume_role/ d' terraform/deploy/$DEPLOY_PATH/terraform.tfvars
              cp terraform/deploy/$DEPLOY_PATH/terraform.tf ../terraform-config
              cp terraform/deploy/$DEPLOY_PATH/terraform.tfvars ../terraform-config
          dir: aws-analytical-env
        inputs:
          - name: aws-analytical-env
        outputs:
          - name: terraform-config
      params:
        AWS_REGION: eu-west-2

    terraform-apply:
      task: terraform-apply
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
            - -exc
            - |
              apk add -q --update --no-cache python3 && ln -sf python3 /usr/bin/python
              python3 -m ensurepip
              pip3 install -q --no-cache --upgrade pip setuptools boto3
              cp ../../../../terraform-config/terraform.tf .
              cp ../../../../terraform-config/terraform.tfvars .
              terraform workspace show
              terraform init
              export TF_VAR_emr_al2_ami_id=$(cat ../../../../emr-al2-ami/id)
              export TF_VAR_aws_analytical_env_emr_launcher_zip="{base_path = \"../../../../emr-launcher-release\", version = \"$(cat ../../../../emr-launcher-release/version)\"}"
              export TF_VAR_manage_mysql_user_lambda_zip="{base_path = \"../../../../manage-mysql-user-release\", version = \"$(cat ../../../../manage-mysql-user-release/version)\"}"
              custom_auth_jar_version=$(cat ../../../../hive-custom-auth-release/version) || true
              export TF_VAR_hive_custom_auth_jar_path="../../../../hive-custom-auth-release/hive-custom-auth-${custom_auth_jar_version}.jar"
              terraform plan -out terraform.plan
              terraform apply -auto-approve terraform.plan
        inputs:
          - name: aws-analytical-env
          - name: terraform-config
          - name: emr-al2-ami

    terraform-plan:
      task: terraform-plan
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
            - -exc
            - |
              apk add -q --update --no-cache python3 && ln -sf python3 /usr/bin/python
              python3 -m ensurepip
              pip3 install -q --no-cache --upgrade pip setuptools boto3
              cp ../../../../terraform-config/terraform.tf .
              cp ../../../../terraform-config/terraform.tfvars .
              terraform workspace show
              terraform init
              export TF_VAR_emr_al2_ami_id=$(cat ../../../../emr-al2-ami/id)
              export TF_VAR_aws_analytical_env_emr_launcher_zip="{base_path = \"../../../../emr-launcher-release\", version = \"$(cat ../../../../emr-launcher-release/version)\"}"
              export TF_VAR_manage_mysql_user_lambda_zip="{base_path = \"../../../../manage-mysql-user-release\", version = \"$(cat ../../../../manage-mysql-user-release/version)\"}"
              custom_auth_jar_version=$(cat ../../../../hive-custom-auth-release/version) || true
              export TF_VAR_hive_custom_auth_jar_path="../../../../hive-custom-auth-release/hive-custom-auth-${custom_auth_jar_version}.jar"
              if [[ "${SKIP_EXIT_CODE}" == "true" ]]; then
                  echo "Performing plan with no exit code check due to SKIP_EXIT_CODE of '${SKIP_EXIT_CODE}'"
                  terraform plan
              else
                echo "Performing plan with exit code check due to SKIP_EXIT_CODE of '${SKIP_EXIT_CODE}'"
                terraform plan -detailed-exitcode
              fi
        inputs:
          - name: aws-analytical-env
          - name: terraform-config
          - name: emr-al2-ami

    terraform-output-app:
      task: terraform-output-app
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
            - -exc
            - |
              cp ../../../../terraform-config/terraform.tf .
              cp ../../../../terraform-config/terraform.tfvars .
              terraform workspace show
              terraform init
              export TF_VAR_emr_al2_ami_id=$(cat ../../../../emr-al2-ami/id)
              export TF_VAR_aws_analytical_env_emr_launcher_zip="{base_path = \"../../../../emr-launcher-release\", version = \"$(cat ../../../../emr-launcher-release/version)\"}"
              terraform output --json > ../../../../terraform-output-app/outputs.json
          dir: aws-analytical-env/terraform/deploy/app
        inputs:
          - name: aws-analytical-env
          - name: terraform-config
          - name: emr-al2-ami
        outputs:
          - name: terraform-output-app

    terraform-taint:
      task: terraform-taint
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
            - -exc
            - |
              cp terraform-config/terraform.tf .
              cp terraform-config/terraform.tfvars .
              terraform workspace show
              terraform init
              terraform taint "module.emr.aws_emr_cluster.cluster"
        inputs:
          - name: aws-analytical-env
          - name: terraform-config

    mirror-git-repo:
      task: mirror-git-repo
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
        run:
          path: sh
          args:
            - -exc
            - |
              source /assume-role
              AWS_COMMOM_BUCKET="$(cat ../terraform-output-common/outputs.json |  jq -r '.config_bucket.value.id')"
              aws s3 sync . s3://$AWS_COMMOM_BUCKET/$S3_ROOT --include "*"
        inputs:
          - name: terraform-output-common

    terraform-output-common:
      task: terraform-output-common
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
            - -exc
            - |
              terraform workspace show
              terraform init
              terraform output --json > ../terraform-output-common/outputs.json
          dir: aws-common-infrastructure
        inputs:
          - name: aws-common-infrastructure
        outputs:
          - name: terraform-output-common

    rotate-mysql-master-password:
      task: rotate-mysql-master-password
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_ROLE_ARN: arn:aws:iam::((aws_account.development)):role/ci
          AWS_REGION: ((dataworks.aws_region))
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
        run:
          path: sh
          args:
            - -exc
            - |
              export RDS_CLUSTER_IDENTIFIER=$(jq -r .rbac_db.value.rds_cluster.cluster_identifier < ../terraform-output/outputs.json)
              export RDS_CREDENTIALS_SECRET_NAME=$(jq -r .rbac_db.value.secrets.master_credentials.name < ../terraform-output/outputs.json)
              source /assume-role
              set +x
              ./rotate_rds_master_user_password_update_secrets_manager.py $RDS_CLUSTER_IDENTIFIER $RDS_CREDENTIALS_SECRET_NAME
          dir: secrets-management
        inputs:
          - name: secrets-management
          - name: terraform-output

    rotate-mysql-client-password:
      task: rotate-client-mysql-password
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_ROLE_ARN: arn:aws:iam::((aws_account.development)):role/ci
          AWS_REGION: ((dataworks.aws_region))
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
        run:
          path: sh
          args:
            - -exc
            - |
              source /assume-role

              MANAGE_USER_FUNCTION_NAME=$(jq -r ".rbac_db.value.manage_mysql_user_lambda.function_name" < ./terraform-output/outputs.json)

              CLIENTS=$(jq -r ".rbac_db.value.secrets.client_credentials | keys[]" < ./terraform-output/outputs.json)
              for client in $CLIENTS; do
                param_name=$(jq -r ".rbac_db.value.secrets.client_credentials[\"$client\"].name" < ./terraform-output/outputs.json);
                privileges=$(jq -r ".rbac_db.value.client_privileges[\"$client\"]" < ./terraform-output/outputs.json);
                jq -n --arg Username "$client" --arg Paramname "$param_name" --arg privileges "$privileges" \
                  '{mysql_user_username: $Username, mysql_user_password_secret_name: $Paramname, privileges: $privileges}' > manifest.json
                aws lambda invoke --function-name $MANAGE_USER_FUNCTION_NAME --invocation-type RequestResponse --payload file://manifest.json --cli-connect-timeout 600 --cli-read-timeout 600 output.json
                jq -eC "if .errorMessage? then error(.errorMessage) else true end" < output.json
              done || exit 1
        inputs:
          - name: terraform-output

    initialise-rbac-db:
      task: initialise-rbac-db
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_ROLE_ARN: arn:aws:iam::((aws_account.development)):role/ci
          AWS_REGION: ((dataworks.aws_region))
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
        inputs:
          - name: terraform-output
        run:
          path: sh
          args:
            - -exc
            - |
              source /assume-role

              INITIALISE_DB_FUNCTION_NAME=$(jq -r ".rbac_db.value.initialise_db_lambda.function_name" < ./terraform-output/outputs.json)
              aws lambda invoke --function-name $INITIALISE_DB_FUNCTION_NAME --invocation-type RequestResponse --cli-connect-timeout 600 --cli-read-timeout 600 output.json

              jq < output.json
              jq -eC "if .errorMessage? then error(.errorMessage) else true end" < output.json

    sync_rbac_db_from_cognito:
      task: sync-rbac-db
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_ROLE_ARN: arn:aws:iam::((aws_account.development)):role/ci
          AWS_REGION: ((dataworks.aws_region))
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
        inputs:
          - name: terraform-output
        run:
          path: sh
          args:
            - -exc
            - |
              source /assume-role

              SYNC_RDS_FUNCTION_NAME=$(jq -r ".emrfs_lambdas.value.rds_sync_lambda.function_name" < ./terraform-output/outputs.json)
              aws lambda invoke --function-name $SYNC_RDS_FUNCTION_NAME --invocation-type RequestResponse --cli-connect-timeout 600 --cli-read-timeout 600 output.json

              jq < output.json
              jq -eC "if .errorMessage? then error(.errorMessage) else true end" < output.json

    create_roles_and_policies_for_emr_users:
      task: create-roles-and-policies
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_ROLE_ARN: arn:aws:iam::((aws_account.development)):role/ci
          AWS_REGION: ((dataworks.aws_region))
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
        inputs:
          - name: terraform-output
        run:
          path: sh
          args:
            - -exc
            - |
              source /assume-role

              POLICY_MUNGE_FUNCTION_NAME=$(jq -r ".emrfs_lambdas.value.policy_munge_lambda.function_name" < ./terraform-output/outputs.json)
              aws lambda invoke --function-name $POLICY_MUNGE_FUNCTION_NAME --invocation-type RequestResponse --cli-connect-timeout 600 --cli-read-timeout 600 output.json

              jq < output.json
              jq -eC "if .errorMessage? then error(.errorMessage) else true end" < output.json

    terraform-bootstrap-crown:
      task: terraform-bootstrap-crown
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        run:
          path: sh
          args:
            - -exc
            - |
              python bootstrap_terraform.py
              sed -i '/^assume_role/ d' terraform.tfvars
              cp terraform.tf ../terraform-config-crown
              cp terraform.tfvars ../terraform-config-crown
          dir: aws-analytical-dataset-generation
        inputs:
          - name: aws-analytical-dataset-generation
        outputs:
          - name: terraform-config-crown
      params:
        AWS_ACCESS_KEY_ID: ((ci.aws_access_key_id))
        AWS_SECRET_ACCESS_KEY: ((ci.aws_secret_access_key))
        AWS_REGION: eu-west-2

    create-aws-profiles:
      task: create-aws-profiles
      attempts: 15
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((docker-awscli-ubuntu.repository))
            version: ((docker-awscli-ubuntu.version))
            tag: ((docker-awscli-ubuntu.version))
        outputs:
          - name: .aws
        params:
          AWS_ACCESS_KEY_ID: ((ci.aws_access_key_id))
          AWS_SECRET_ACCESS_KEY: ((ci.aws_secret_access_key))
        run:
          path: sh
          args:
            - -exc
            - |
              cat <<EOF> .aws/credentials
              [default]
              region = eu-west-1
              aws_access_key_id = $AWS_ACCESS_KEY_ID
              aws_secret_access_key = $AWS_SECRET_ACCESS_KEY

              [ci]
              region = eu-west-1
              role_arn = $AWS_ROLE
              source_profile = default
              s3 =
                max_concurrent_requests = 5
                signature_version = s3v4
              EOF

    create-crown-credentials:
      task: create-crown-credentials
      attempts: 15
      input_mapping:
        git-repo: aws-analytical-env
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((docker-awscli-ubuntu.repository))
            version: ((docker-awscli-ubuntu.version))
            tag: ((docker-awscli-ubuntu.version))
        inputs:
          - name: git-repo
        outputs:
          - name: ssh-credentials
        params:
          PRIVATE_KEY: ((crown.private_key))
        run:
          path: sh
          dir: ssh-credentials
          args:
            - -exc
            - |
              cat <<EOF> id_rsa
              $PRIVATE_KEY
              EOF
              mv ../git-repo/ci/aws-analytical-env/templates/ssh_config.tpl ./config
              chmod 400 id_rsa

    terraform-output-adg:
      task: terraform-output-adg
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((terraform.repository))
            version: ((terraform12.version))
            tag: ((terraform12.version))
        run:
          path: sh
          args:
            - -exc
            - |
              cp ../terraform-config-crown/terraform.tf .
              cp ../terraform-config-crown/terraform.tfvars .
              terraform workspace show
              terraform init
              terraform output --json > ../terraform-output-adg/outputs.json
          dir: aws-analytical-dataset-generation
        inputs:
          - name: aws-analytical-dataset-generation
          - name: terraform-config-crown
        outputs:
          - name: terraform-output-adg
        params:
          TF_CLI_ARGS_plan: -lock-timeout=300s
          TF_INPUT: "false"
          AWS_ACCESS_KEY_ID: ((ci.aws_access_key_id))
          AWS_SECRET_ACCESS_KEY: ((ci.aws_secret_access_key))

    get-uc-labs-files:
      task: get-uc-labs-files
      attempts: 50
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((docker-awscli-ubuntu.repository))
            version: ((docker-awscli-ubuntu.version))
            tag: ((docker-awscli-ubuntu.version))
        inputs:
          - name: ssh-credentials
        outputs:
          - name: uc_labs
        params:
          RETRY_SLEEP_TIME: 600
          TARGET_SERVER: "hdp-edge01.node.prd.dw"
        run:
          path: sh
          args:
            - -exc
            - |
              whoami
              cp -R ssh-credentials ~/.ssh
              scp -r -o StrictHostKeyChecking=no hdp-edge01.node.prd.dw:${SOURCE_PATH}/* uc_labs/

    load-s3:
      task: load-s3
      attempts: 15
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((docker-awscli-ubuntu.repository))
            version: ((docker-awscli-ubuntu.version))
            tag: ((docker-awscli-ubuntu.version))
        inputs:
          - name: uc_labs
          - name: .aws
          - name: terraform-output-adg
        params:
          AWS_PROFILE: ci
          AWS_SHARED_CREDENTIALS_FILE: .aws/credentials
        run:
          path: sh
          args:
            - -exc
            - |
              AWS_PUBLISHED_BUCKET="$(cat terraform-output-adg/outputs.json |  jq -r '.published_bucket.value.id')"
              aws s3 --endpoint-url=https://s3-eu-west-1.amazonaws.com sync uc_labs/ s3://${AWS_PUBLISHED_BUCKET}/uc-labs/

    stop-cluster:
      task: stop-cluster
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_ROLE_ARN: arn:aws:iam::((aws_account.management)):role/ci
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
        run:
          path: sh
          args:
            - -exc
            - |
              export AWS_DEFAULT_REGION
              source /assume-role
              set +x
              for CLUSTER_ID in $(aws emr list-clusters --active | jq -r '.Clusters[] | select(.Name | test("batch-analytical-env")) | .Id');
              do
                aws emr terminate-clusters --cluster-ids $CLUSTER_ID
              done

    stop-waiting-cluster:
      task: stop-waiting-cluster
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_ROLE_ARN: arn:aws:iam::((aws_account.management)):role/ci
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
        run:
          path: sh
          args:
            - -exc
            - |
              export AWS_DEFAULT_REGION
              source /assume-role
              set +x

              for CLUSTER_ID in `aws emr list-clusters --cluster-state WAITING | jq -r '.Clusters[].Id'`
              do
                  echo "Checking cluster $CLUSTER_ID"
               
                  # Is it an analytical cluster (should probably tag type of analytical-env ).

                  APPNAME=`aws emr describe-cluster --cluster-id $CLUSTER_ID | jq -r ".Cluster.Tags[] | if .Key == \"Application\" then .Value else empty end"`
                  CLEVEL=`aws emr describe-cluster --cluster-id $CLUSTER_ID | jq -r ".Cluster.StepConcurrencyLevel"`
                 
                  if [[ ${APPNAME:-""} == "aws-analytical-env" ]]
                  then
                      echo $CLUSTER_ID is an analytical env cluster

                      # Currently the only way to know if its a batch cluster is to check if its concurrency is 256

                      if [[ $CLEVEL -eq 256 ]]
                      then
                          echo $CLUSTER_ID is a batch cluster
                          END_DATE=`aws emr list-steps --cluster-id $CLUSTER_ID | jq '.Steps[0].Status.Timeline.EndDateTime | floor'`
                          let DELTA="`date +%s` - $END_DATE"

                          if [[ $DELTA -gt 3600 ]]
                          then
                              echo Stopping cluster $CLUSTER_ID with a delta of $DELTA
                              aws emr terminate-clusters --cluster-ids $CLUSTER_ID
                          fi
                      fi
                  fi
              done

    mirror-ucsqlhelper:
      task: mirror-ucsqlhelper
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
          MIRROR_S3_KEY_PREFIX: component/aws-analytical-env/r-packages
        run:
          path: sh
          args:
            - -exc
            - |
              source /assume-role
              tar -zcf ucsqlhelper.tar.gz ucsqlhelper
              AWS_COMMOM_BUCKET="$(cat ./terraform-output-common/outputs.json |  jq -r '.config_bucket.value.id')"
              aws s3 cp ucsqlhelper.tar.gz s3://$AWS_COMMOM_BUCKET/$MIRROR_S3_KEY_PREFIX/ucsqlhelper.tar.gz
        inputs:
          - name: ucsqlhelper
          - name: terraform-output-common
