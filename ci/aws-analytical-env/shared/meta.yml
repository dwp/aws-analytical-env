meta:
  plan:
    terraform-common-config:
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            tag: ((dataworks.terraform_version))
        params:
          TF_INPUT: false
          TF_CLI_ARGS_apply: -lock-timeout=300s
          TF_CLI_ARGS_plan: -lock-timeout=300s

    terraform-bootstrap:
      task: terraform-bootstrap
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: dwpdigital/jinja-yaml-aws
            tag: 0.0.19
        run:
          path: sh
          args:
            - -exc
            - |
              python bootstrap_terraform.py
              sed -i '/^assume_role/ d' terraform/deploy/$DEPLOY_PATH/terraform.tfvars
              cp terraform/deploy/$DEPLOY_PATH/terraform.tf ../terraform-config
              cp terraform/deploy/$DEPLOY_PATH/terraform.tfvars ../terraform-config
          dir: aws-analytical-env
        inputs:
          - name: aws-analytical-env
        outputs:
          - name: terraform-config
      params:
        AWS_REGION: eu-west-2

    terraform-apply:
      task: terraform-apply
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
            - -exc
            - |
              cp ../../../../terraform-config/terraform.tf .
              cp ../../../../terraform-config/terraform.tfvars .
              terraform workspace show
              terraform init
              terraform plan -out terraform.plan
              terraform apply -auto-approve terraform.plan
        inputs:
          - name: aws-analytical-env
          - name: terraform-config
      params:
        TF_CLI_ARGS_apply: -lock-timeout=300s
        TF_INPUT: "false"

    terraform-plan:
      task: terraform-plan
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
            - -exc
            - |
              cp ../../../../terraform-config/terraform.tf .
              cp ../../../../terraform-config/terraform.tfvars .
              terraform workspace show
              terraform init
              terraform plan
        inputs:
          - name: aws-analytical-env
          - name: terraform-config
      params:
        TF_CLI_ARGS_plan: -lock-timeout=300s -detailed-exitcode
        TF_INPUT: "false"

    terraform-output-app:
      task: terraform-output-app
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
            - -exc
            - |
              cp ../../../../terraform-config/terraform.tf .
              cp ../../../../terraform-config/terraform.tfvars .
              terraform workspace show
              terraform init
              terraform output --json > ../../../../terraform-output-app/outputs.json
          dir: aws-analytical-env/terraform/deploy/app
        inputs:
          - name: aws-analytical-env
          - name: terraform-config
        outputs:
          - name: terraform-output-app
      params:
        TF_CLI_ARGS_plan: -lock-timeout=300s
        TF_INPUT: "false"

    analytical-env-e2e-tests:
      task: analytical-env-e2e-tests
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((docker-python-boto-behave.repository))
            version: ((docker-python-boto-behave.version))
            tag: ((docker-python-boto-behave.version))
        params:
          AWS_DEFAULT_PROFILE: ci
          AWS_SHARED_CREDENTIALS_FILE: ../../.aws/credentials
          AWS_CONFIG_FILE: ../../.aws/config
          E2E_TEST_TIMEOUT: 300
          E2E_FEATURE_TAG_FILTER: '@analytical'
        run:
          dir: aws-dataworks-e2e-framework
          path: sh
          args:
            - -exc
            - |
              cd src/runners
              ./run-dev-analytical-tests.sh
        inputs:
          - name: aws-dataworks-e2e-framework
          - name: .aws
          - name: meta

    terraform-taint:
      task: terraform-taint
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
            - -exc
            - |
              cp terraform-config/terraform.tf .
              cp terraform-config/terraform.tfvars .
              terraform workspace show
              terraform init
              terraform taint "module.emr.aws_emr_cluster.cluster"
        inputs:
          - name: aws-analytical-env
          - name: terraform-config
      params:
        TF_CLI_ARGS_plan: -lock-timeout=300s -detailed-exitcode
        TF_INPUT: "false"
