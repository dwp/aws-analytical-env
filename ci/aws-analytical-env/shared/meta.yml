meta:
  plan:
    terraform-common-config:
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            tag: ((dataworks.terraform_version))
        params:
          TF_INPUT: false
          TF_CLI_ARGS_apply: -lock-timeout=300s
          TF_CLI_ARGS_plan: -lock-timeout=300s
          TF_VAR_costcode: ((dataworks.costcode))

    terraform-bootstrap:
      task: terraform-bootstrap
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((docker-awscli.repository))
            version: ((docker-awscli.version))
            tag: ((docker-awscli.version))
        run:
          path: sh
          args:
            - -exc
            - |
              python bootstrap_terraform.py
              sed -i '/^assume_role/ d' terraform/deploy/$DEPLOY_PATH/terraform.tfvars
              cp terraform/deploy/$DEPLOY_PATH/terraform.tf ../terraform-config
              cp terraform/deploy/$DEPLOY_PATH/terraform.tfvars ../terraform-config
          dir: aws-analytical-env
        inputs:
          - name: aws-analytical-env
        outputs:
          - name: terraform-config
      params:
        AWS_REGION: eu-west-2

    terraform-apply:
      task: terraform-apply
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
            - -exc
            - |
              cp ../../../../terraform-config/terraform.tf .
              cp ../../../../terraform-config/terraform.tfvars .
              terraform workspace show
              terraform init
              export TF_VAR_aws_analytical_env_emr_launcher_zip="{base_path = \"../../../../emr-launcher-release\", version = \"$(cat ../../../../emr-launcher-release/version)\"}"
              terraform plan -out terraform.plan
              terraform apply -auto-approve terraform.plan
        inputs:
          - name: aws-analytical-env
          - name: terraform-config

    terraform-plan:
      task: terraform-plan
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
            - -exc
            - |
              cp ../../../../terraform-config/terraform.tf .
              cp ../../../../terraform-config/terraform.tfvars .
              terraform workspace show
              terraform init
              export TF_VAR_aws_analytical_env_emr_launcher_zip="{base_path = \"../../../../emr-launcher-release\", version = \"$(cat ../../../../emr-launcher-release/version)\"}"
              terraform plan
        inputs:
          - name: aws-analytical-env
          - name: terraform-config

    terraform-output-app:
      task: terraform-output-app
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
            - -exc
            - |
              cp ../../../../terraform-config/terraform.tf .
              cp ../../../../terraform-config/terraform.tfvars .
              terraform workspace show
              terraform init
              export TF_VAR_aws_analytical_env_emr_launcher_zip="{base_path = \"../../../../emr-launcher-release\", version = \"$(cat ../../../../emr-launcher-release/version)\"}"
              terraform output --json > ../../../../terraform-output-app/outputs.json
          dir: aws-analytical-env/terraform/deploy/app
        inputs:
          - name: aws-analytical-env
          - name: terraform-config
        outputs:
          - name: terraform-output-app

    analytical-env-e2e-tests:
      task: analytical-env-e2e-tests
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_python_boto_behave_repository))
            version: ((dataworks.docker_python_boto_behave_version))
            tag: ((dataworks.docker_python_boto_behave_version))
        params:
          E2E_TEST_TIMEOUT: 300
          E2E_FEATURE_TAG_FILTER: '@analytical'
          AWS_S3_INPUT_BUCKET: 'na'
          AWS_ACC: ((dataworks.aws_dev_acc))
          AWS_DEFAULT_PROFILE: 'default'
          AWS_SNS_TOPIC_NAME: 'na'
          DYNAMODB_TABLE_NAME: 'na'
          MONGO_SNAPSHOT_BUCKET: 'na'
          MONGO_SNAPSHOT_PATH: 'na'
          DLQ_S3_PATH_PREFIX: 'na'
        run:
          dir: aws-dataworks-e2e-framework
          path: sh
          args:
            - -exc
            - |
              mkdir ~/.aws
              cat << EOF > ~/.aws/config
              [profile default]
              role_arn = arn:aws:iam::((dataworks.aws_dev_acc)):role/ci
              credential_source = Ec2InstanceMetadata
              region = ((dataworks.aws_region))
              EOF
              cd src/runners
              export no_proxy="$no_proxy,s3.*.amazonaws.com,s3.amazonaws.com"
              ./run-ci.sh "../../../meta" "" "" "" "" "../../../terraform-output-analytical-dataset-generation/outputs.json"
        inputs:
          - name: aws-dataworks-e2e-framework
          - name: meta
          - name: terraform-output-analytical-dataset-generation

    terraform-taint:
      task: terraform-taint
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
            - -exc
            - |
              cp terraform-config/terraform.tf .
              cp terraform-config/terraform.tfvars .
              terraform workspace show
              terraform init
              terraform taint "module.emr.aws_emr_cluster.cluster"
        inputs:
          - name: aws-analytical-env
          - name: terraform-config

    terraform-analytical-dataset-generation-bootstrap:
      task: terraform-analytical-dataset-generation-bootstrap
      .: (( inject meta.plan.terraform-common-config ))
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: dwpdigital/jinja-yaml-aws
            tag: 0.0.19
        run:
          path: sh
          args:
            - -exc
            - |
              export AWS_REGION=((dataworks.aws_region))
              python bootstrap_terraform.py
              cp terraform.tf ../terraform-config
              cp terraform.tfvars ../terraform-config
          dir: aws-analytical-dataset-generation
        inputs:
          - name: aws-analytical-dataset-generation
        outputs:
          - name: terraform-config


    terraform-output-analytical-dataset-generation:
      task: terraform-output-analytical-dataset-generation
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            tag: ((dataworks.terraform_version))
        run:
          path: sh
          args:
            - -exc
            - |
              cp ../terraform-config/terraform.tf .
              cp ../terraform-config/terraform.tfvars .
              terraform workspace show
              terraform init
              terraform output --json > ../terraform-output-analytical-dataset-generation/outputs.json
          dir: aws-analytical-dataset-generation
        inputs:
          - name: terraform-config
        outputs:
          - name: terraform-output-analytical-dataset-generation
      params:
        TF_CLI_ARGS_plan: -lock-timeout=300s
        TF_INPUT: "false"

    mirror-git-repo:
      task: mirror-git-repo
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
        run:
          path: sh
          args:
            - -exc
            - |
              source /assume-role
              AWS_COMMOM_BUCKET="$(cat ../terraform-output-common/outputs.json |  jq -r '.config_bucket.value.id')"
              aws s3 sync . s3://$AWS_COMMOM_BUCKET/$S3_ROOT --include "*"
          dir: chs-uc-lab-repo
        inputs:
          - name: chs-uc-lab-repo
          - name: terraform-output-common

    terraform-output-common:
      task: terraform-output-common
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
            - -exc
            - |
              terraform workspace show
              terraform init
              terraform output --json > ../terraform-output-common/outputs.json
          dir: aws-common-infrastructure
        inputs:
          - name: aws-common-infrastructure
        outputs:
          - name: terraform-output-common

    terraform-bootstrap-crown:
      task: terraform-bootstrap-crown
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((docker-awscli.repository))
            version: ((docker-awscli.version))
            tag: ((docker-awscli.version))
        run:
          path: sh
          args:
            - -exc
            - |
              python bootstrap_terraform.py
              sed -i '/^assume_role/ d' terraform.tfvars
              cp terraform.tf ../terraform-config-crown
              cp terraform.tfvars ../terraform-config-crown
          dir: aws-analytical-dataset-generation
        inputs:
          - name: aws-analytical-dataset-generation
        outputs:
          - name: terraform-config-crown
      params:
        AWS_ACCESS_KEY_ID: ((ci.aws_access_key_id))
        AWS_SECRET_ACCESS_KEY: ((ci.aws_secret_access_key))
        AWS_REGION: eu-west-2

    create-aws-profiles:
      task: create-aws-profiles
      attempts: 15
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((docker-awscli-ubuntu.repository))
            version: ((docker-awscli-ubuntu.version))
            tag: ((docker-awscli-ubuntu.version))
        outputs:
          - name: .aws
        params:
          AWS_ACCESS_KEY_ID: ((ci.aws_access_key_id))
          AWS_SECRET_ACCESS_KEY: ((ci.aws_secret_access_key))
        run:
          path: sh
          args:
            - -exc
            - |
              cat <<EOF> .aws/credentials
              [default]
              region = eu-west-1
              aws_access_key_id = $AWS_ACCESS_KEY_ID
              aws_secret_access_key = $AWS_SECRET_ACCESS_KEY

              [ci]
              region = eu-west-1
              role_arn = $AWS_ROLE
              source_profile = default
              s3 =
                max_concurrent_requests = 5
                signature_version = s3v4
              EOF

    create-crown-credentials:
      task: create-crown-credentials
      attempts: 15
      input_mapping:
        git-repo: aws-analytical-env
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((docker-awscli-ubuntu.repository))
            version: ((docker-awscli-ubuntu.version))
            tag: ((docker-awscli-ubuntu.version))
        inputs:
          - name: git-repo
        outputs:
          - name: ssh-credentials
        params:
          PRIVATE_KEY: ((crown.private_key))
        run:
          path: sh
          dir: ssh-credentials
          args:
            - -exc
            - |
              cat <<EOF> id_rsa
              $PRIVATE_KEY
              EOF
              mv ../git-repo/ci/aws-analytical-env/templates/ssh_config.tpl ./config
              chmod 400 id_rsa

    terraform-output-adg:
      task: terraform-output-adg
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((terraform.repository))
            version: ((terraform12.version))
            tag: ((terraform12.version))
        run:
          path: sh
          args:
            - -exc
            - |
              cp ../terraform-config-crown/terraform.tf .
              cp ../terraform-config-crown/terraform.tfvars .
              terraform workspace show
              terraform init
              terraform output --json > ../terraform-output-adg/outputs.json
          dir: aws-analytical-dataset-generation
        inputs:
          - name: aws-analytical-dataset-generation
          - name: terraform-config-crown
        outputs:
          - name: terraform-output-adg
        params:
          TF_CLI_ARGS_plan: -lock-timeout=300s
          TF_INPUT: "false"
          AWS_ACCESS_KEY_ID: ((ci.aws_access_key_id))
          AWS_SECRET_ACCESS_KEY: ((ci.aws_secret_access_key))

    get-telephone-claims-files:
      task: get-telephone-claims-files
      attempts: 50
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((docker-awscli-ubuntu.repository))
            version: ((docker-awscli-ubuntu.version))
            tag: ((docker-awscli-ubuntu.version))
        inputs:
          - name: ssh-credentials
        outputs:
          - name: uc_labs
        params:
          RETRY_SLEEP_TIME: 600
          TARGET_SERVER: "hdp-edge01.node.prd.dw"
        run:
          path: sh
          args:
            - -exc
            - |
              whoami
              cp -R ssh-credentials ~/.ssh
              scp -r -o StrictHostKeyChecking=no hdp-edge01.node.prd.dw:${SOURCE_PATH}/* uc_labs/

    load-s3:
      task: load-s3
      attempts: 15
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((docker-awscli-ubuntu.repository))
            version: ((docker-awscli-ubuntu.version))
            tag: ((docker-awscli-ubuntu.version))
        inputs:
          - name: uc_labs
          - name: .aws
          - name: terraform-output-adg
        params:
          AWS_PROFILE: ci
          AWS_SHARED_CREDENTIALS_FILE: .aws/credentials
        run:
          path: sh
          args:
            - -exc
            - |
              AWS_PUBLISHED_BUCKET="$(cat terraform-output-adg/outputs.json |  jq -r '.published_bucket.value.id')"
              aws s3 --endpoint-url=https://s3-eu-west-1.amazonaws.com sync uc_labs/ s3://${AWS_PUBLISHED_BUCKET}/uc-labs/telephony_claims
