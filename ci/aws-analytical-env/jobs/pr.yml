jobs:
  - name: pull-request
    max_in_flight: 1
    plan:
      - get: aws-analytical-env
        resource: aws-analytical-env-pr
        trigger: true
        version: every
      - get: emr-launcher-release
      - get: manage-mysql-user-release
      - put: aws-analytical-env
        resource: aws-analytical-env-pr
        params:
          path: aws-analytical-env
          status: pending
      - .: (( inject meta.plan.terraform-bootstrap ))
        params:
          DEPLOY_PATH: infra
      - .: (( inject meta.plan.terraform-plan ))
        config:
          run:
            dir: 'aws-analytical-env/terraform/deploy/infra'
        params:
          TF_WORKSPACE: 'qa'
          TF_CLI_ARGS_plan: -lock-timeout=300s # overwrite removes -detailed-exitcode
      - .: (( inject meta.plan.terraform-bootstrap ))
        params:
          DEPLOY_PATH: app
      - .: (( inject meta.plan.terraform-plan ))
        config:
          run:
            dir: 'aws-analytical-env/terraform/deploy/app'
          inputs:
            - name: emr-launcher-release
            - name: manage-mysql-user-release
        params:
          TF_WORKSPACE: 'qa'
          TF_CLI_ARGS_plan: -lock-timeout=300s # overwrite removes -detailed-exitcode
          TF_VAR_emp_dir_path: ../../../../emp-release
      - .: (( inject meta.plan.terraform-bootstrap ))
        params:
          DEPLOY_PATH: testing
      - .: (( inject meta.plan.terraform-plan ))
        config:
          run:
            dir: 'aws-analytical-env/terraform/deploy/testing'
        params:
          TF_WORKSPACE: 'qa'
          TF_CLI_ARGS_plan: -lock-timeout=300s # overwrite removes -detailed-exitcode
          TF_VAR_emp_dir_path: ../../../../emp-release
    on_failure:
      put: aws-analytical-env
      resource: aws-analytical-env-pr
      params:
        path: aws-analytical-env
        status: failure
    on_success:
      put: aws-analytical-env
      resource: aws-analytical-env-pr
      params:
        path: aws-analytical-env
        status: success
  - name: pull-request-cognito
    max_in_flight: 1
    plan:
      - get: aws-analytical-env
        resource: aws-analytical-env-pr
        trigger: true
        version: every
      - put: aws-analytical-env
        resource: aws-analytical-env-pr
        params:
          path: aws-analytical-env
          status: pending
      - get: custom-auth-lambda-release
        trigger: true
      - get: onboarding-email-template
        trigger: false
      - .: (( inject meta.plan.terraform-bootstrap ))
        params:
          DEPLOY_PATH: cognito
      - .: (( inject meta.plan.terraform-plan ))
        config:
          run:
            dir: 'aws-analytical-env/terraform/deploy/cognito'
          inputs:
            - name: custom-auth-lambda-release
            - name: onboarding-email-template
        params:
          TF_CLI_ARGS_plan: -lock-timeout=300s # overwrite removes -detailed-exitcode
          TF_VAR_custom_auth_file_path: ../../../../custom-auth-lambda-release/lambda.zip
          TF_VAR_onboarding_email_file_path: ../../../../onboarding-email-template/default_email_template_analytical_onboarding.html
    on_failure:
      put: aws-analytical-env
      resource: aws-analytical-env-pr
      params:
        path: aws-analytical-env
        status: failure
    on_success:
      put: aws-analytical-env
      resource: aws-analytical-env-pr
      params:
        path: aws-analytical-env
        status: success
