jobs:
  - name: rotate-mysql-master-credentials-integration
    plan:
      - get: aws-analytical-env
        trigger: false
      - get: secrets-management
        trigger: false
      - .: (( inject meta.plan.terraform-bootstrap ))
        params:
          DEPLOY_PATH: app
      - .: (( inject meta.plan.terraform-output-app))
        config:
          params:
            TF_WORKSPACE: 'integration'
      - .: (( inject meta.plan.rotate-mysql-master-password ))
        config:
          params:
            AWS_ACC: ((aws_account.integration))
            AWS_ROLE_ARN: arn:aws:iam::((aws_account.integration)):role/ci
        input_mapping:
           terraform-output: terraform-output-app

  - name: rotate-mysql-client-credentials-integration
    plan:
      - get: aws-analytical-env
        trigger: false
      - .: (( inject meta.plan.terraform-bootstrap ))
        params:
          DEPLOY_PATH: app
      - .: (( inject meta.plan.terraform-output-app))
        config:
          params:
            TF_WORKSPACE: 'integration'
      - .: (( inject meta.plan.rotate-mysql-client-password ))
        config:
          params:
            AWS_ACC: ((aws_account.integration))
            AWS_ROLE_ARN: arn:aws:iam::((aws_account.integration)):role/ci
        input_mapping:
         terraform-output: terraform-output-app

  - name: initialise-rbac-db-integration
    plan:
      - get: aws-analytical-env
        trigger: false
      - .: (( inject meta.plan.terraform-bootstrap ))
        params:
          DEPLOY_PATH: app
      - .: (( inject meta.plan.terraform-output-app))
        config:
          params:
            TF_WORKSPACE: 'integration'
      - .: (( inject meta.plan.initialise-rbac-db ))
        config:
          params:
            AWS_ACC: ((aws_account.integration))
            AWS_ROLE_ARN: arn:aws:iam::((aws_account.integration)):role/ci
        input_mapping:
          terraform-output: terraform-output-app
