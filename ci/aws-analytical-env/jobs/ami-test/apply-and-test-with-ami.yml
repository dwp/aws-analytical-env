jobs:
  - name: apply-and-test-with-ami
    max_in_flight: 1
    serial_groups: [qa-applies]
    plan:
      - in_parallel:
          - put: meta
            resource: meta-qa
          - get: aws-analytical-env
            trigger: false
            passed:
              - qa
          - get: emp-release
            trigger: false
            passed:
              - qa
          - get: emr-launcher-release
            trigger: false
            passed:
              - qa
          - get: manage-mysql-user-release
            trigger: false
            passed:
              - qa
          - get: hive-custom-auth-release
            trigger: false
            passed:
              - qa
          - get: emr-al2-ami
            resource: untested-al2-analytical-env-emr-ami
            trigger: true
      - .: (( inject meta.plan.terraform-bootstrap ))
        config:
          params:
            AWS_ACC: ((aws_account.qa))
            DEPLOY_PATH: infra
      - .: (( inject meta.plan.terraform-apply ))
        task: terraform-apply-infra
        config:
          run:
            dir: 'aws-analytical-env/terraform/deploy/infra'
        params:
          TF_WORKSPACE: qa
          TEST_AMI_RUN: true
      - .: (( inject meta.plan.terraform-plan ))
        task: terraform-plan-infra
        config:
          run:
            dir: 'aws-analytical-env/terraform/deploy/infra'
          params:
            TF_WORKSPACE: qa
            TEST_AMI_RUN: true
      - .: (( inject meta.plan.terraform-bootstrap ))
        params:
          DEPLOY_PATH: app
      - .: (( inject meta.plan.terraform-apply ))
        task: terraform-apply-app
        config:
          run:
            dir: 'aws-analytical-env/terraform/deploy/app'
          inputs:
            - name: emp-release
            - name: emr-launcher-release
            - name: manage-mysql-user-release
            - name: hive-custom-auth-release
        params:
          TF_WORKSPACE: 'qa'
          TF_VAR_emp_dir_path: ../../../../emp-release
      - .: (( inject meta.plan.terraform-plan ))
        task: terraform-plan-app
        config:
          run:
            dir: 'aws-analytical-env/terraform/deploy/app'
          inputs:
            - name: emp-release
            - name: emr-launcher-release
            - name: manage-mysql-user-release
            - name: hive-custom-auth-release
        params:
          TF_WORKSPACE: 'qa'
          TF_VAR_emp_dir_path: ../../../../emp-release
      - .: (( inject meta.plan.terraform-bootstrap ))
        params:
          DEPLOY_PATH: testing
      - .: (( inject meta.plan.terraform-output-testing ))
        params:
          TF_WORKSPACE: 'qa'
      - .: (( inject meta.plan.test-emr-cluster ))
        attempts: 3
        config:
          params:
            AWS_ROLE_ARN: arn:aws:iam::((aws_account.qa)):role/ci
      - in_parallel:
        - .: (( inject meta.plan.test-emr-cluster))
          config:
            params:
              TF_WORKSPACE: qa
              AWS_ACC: ((aws_account.qa))
              AWS_ROLE_ARN: arn:aws:iam::((aws_account.qa)):role/ci


    on_failure:
      do:
        - .: (( inject meta.plan.ami-test-results ))
          task: ami-test-result-fail
          config:
            params:
              RESULT: FAILED
    on_success:
      do:
        - .: (( inject meta.plan.ami-test-results ))
          task: ami-test-result-success
          config:
              params:
                RESULT: SUCCESS

